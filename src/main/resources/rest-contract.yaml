openapi: 3.0.3
info:
  title: SpringBootProject RES API - OpenAPI 3.0
  description: |-
    Descripcion de mi Contrato
    
      links:
     - [Ejemplos Google](https://www.google.com)

  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io

  #Servers: de localhost para utilizar con la DB
servers:
  - url: https://localhost:8080/api/v1

  #Tags: Para los accesos a los endpoints, con nombre y descripcion estos van a contener las rutas a las peticiones ejemplos GET,POST,PUT,DELETE.
tags:

  - name: backoffice
    description: Creacion de productos, categorias, etc.

  - name: store
    description: Acceso a la tienda

  - name: user
    description: Operaciones con usuarios

  - name: login
    description: Operaciones con login

  #Paths puntos de accesos
paths:
  /users/user:
    #Post para la creacion de Usuarios
    post:
      #Este tags es para vincularlo con el que generamos arriba en el apartado de tags
      tags:
        - user
      security:
        - bearerAuth: [ ]
      #Sumaary descripcion de lo que hace.
      summary: Creacion de Usuario
      #Descripcion si quisiera mas, se ve a la hora de desplegar en el metodo en la interfaz.
      description: Endpoint Post para creacion de un usuario.
      #OperationId es el nombre con el cual se va a generar este metodo para usarlo desde un Usercontroller en el backend. Ese Usercontroller lo genera para el path en este caso /user.
      operationId: createUser
      #requestBody sirve para recibir data que me van a enviar desde el front. Esto lo que hace es modelar el metodo Createuser que se genera por el operationID para recibir esos datos y modelarlos.
      requestBody:
        description: Crear objeto de usuario
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequestDTO'
      responses:
        '200':
          description: Operacion Exitosa, respuesta UserResponseDTO
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseContainerDTO'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    #Get para obtener todos los usuarios
    get:
      tags:
        - user
      security:
        - bearerAuth: []
      summary: Obtener todos los Usuarios
      description: Endpoint GET para pedidos de un usuario.
      operationId: getAllUser
      #A ser un metodo GET el requestBody no es necesario ya que no voy a mandar nada por url
      responses:
        default:
          description: successful operation
          content:
            application/json:
              #En el schema del response utilizamos el UserListDTO modelo de schema que generamos en los       component.
              schema:
                $ref: '#/components/schemas/UserListResponseContainerDTO'

  /users/user/{userId}:
    #Get para obtener un usuario en particular pasando el id
    get:
      tags:
        - user
      security:
        - bearerAuth: []
      summary: get usuario
      description: obtener usuario por id
      operationId: getUser
      parameters:
        - name: userId
          in: path
          description: Este es el id del usuario que recibimos en el path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        default:
          description: Operacion Exitosa, respuesta UserResponseDTO
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseContainerDTO'

    #Put para la edicion de un usuario pasando id
    put:
      tags:
        - user
      security:
        - bearerAuth: []
      summary: Actualizar usuario
      description: EndPoint para la actualizacion de un usuario pasando el ID
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: Este es el id del usuario que recibimos en el path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Actualizacion de usuario
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
      responses:
        '200':
          description: Operacion Exitosa, respuesta UserResponseDTO
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseContainerDTO'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    #Delete para borrar un usuario pasando el id
    delete:
      tags:
        - user
      security:
        - bearerAuth: []
      summary: Eliminar usuario
      description: EndPoint para eliminar usuario
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: Este es el id del usuario que recibimos en el path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Operacion Exitosa, respuesta EmptyResponseDTO
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponseDTO'
        '401':
          $ref: '#/components/responses/UnauthorizedError'


  /users/role:
    post:
      tags:
        - user
      security:
        - bearerAuth: []
      summary: Creacion de Roles
      description: EndPoint para crear Roles
      operationId: createRole
      requestBody:
        description: Crear objeto Rol
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRoleRequestDTO'
      responses:
        '200':
          description: Operacion Exitosa, respuesta de UserRolDTO
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRoleResponseContainerDTO'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    get:
      tags:
        - user
      security:
        - bearerAuth: []
      summary: Obtener Todos los roles
      description: EndPoint para obtener todos los roles
      operationId: getAllRoles
      responses:
        default:
          description: Operacion exitosa, respuesta de UserROlListDTO
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRoleListResponseContainerDTO'


  /users/user/{userId}/roles:
    get:
      tags:
        - user
      security:
        - bearerAuth: []
      summary: Obtener rol de un usuario
      description: EndPoint para obtener un la descriocion del rol asociado a un usuario el cual el id del usuario viene en el path
      operationId: getUserRoles
      parameters:
        - name: userId
          in: path
          description: id del usuario
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Operacion Exitosa, respuesta UserRoleListDTO
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRoleResponseContainerDTO'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /users/user/{userId}/role/{roleId}:
    post:
      tags:
        - user
      security:
        - bearerAuth: []
      summary: Asignar Rol a un usuario
      description: EndPoint para asignar Rol a un usuario
      operationId: addRoleToUser
      parameters:
        - name: userId
          in: path
          description: id del usuario
          required: true
          schema:
            type: integer
            format: int64
        - name: roleId
          in: path
          description: id del Rol
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation response a EmptyResponseDTO as data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponseDTO'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    delete:
      tags:
        - user
      security:
        - bearerAuth: []
      summary: Eliminar Rol a un usuario
      description: EndPoint para eliminar el rol de un usuario
      operationId: removeRoleToUser
      parameters:
        - name: userId
          in: path
          description: id del usuario
          required: true
          schema:
            type: integer
            format: int64
        - name: roleId
          in: path
          description: id del Rol
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation response a EmptyResponseDTO as data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponseDTO'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  #Creacion de Productos
  /products/product:
    post:
      tags:
        - backoffice
      security:
        - bearerAuth: []
      summary: Creacion de productos
      description: EndPoint para crear Productos
      operationId: createProduct
      requestBody:
        description: Crear objeto producto
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequestDTO'
      responses:
        '200':
          description: Operacion exitosa, respuesta de ProductDTO
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponseContainerDTO'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    #Obtener todos los productos
    get:
      tags:
        - backoffice
      security:
        - bearerAuth: []
      summary: Obtener todos los productos
      description: EndPoint para obtener todos los productos
      operationId: getAllProducts
      responses:
        default:
          description: Operacion exitosa, respuesta con ProductListDTO
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductListResponseContainerDTO'

  #Path para actualizar, eliminar y buscar un producto por id
  /products/product/{productId}:
    put:
      tags:
        - backoffice
      security:
        - bearerAuth: []
      summary: Actualizar producto
      description: EndPoint para actualizar producto
      operationId: updateProduct
      parameters:
        - name: productId
          in: path
          description: id del producto
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: actualizar producto por id
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDTO'
      responses:
        '200':
          description: operacion exitosa, respuesta de ProductDTO
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponseContainerDTO'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    #Eliminar producto
    delete:
      tags:
        - backoffice
      security:
        - bearerAuth: []
      summary: Eliminar producto
      description: EndPoint para eliminar producto
      operationId: deleteProduct
      parameters:
        - name: productId
          in: path
          description: id del producto
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: operacion exitosa, respuesta EmptyResponseDTO
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponseDTO'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    #Obtener producto por id
    get:
      tags:
        - backoffice
      security:
        - bearerAuth: []
      summary: Obtener producto por id
      description: EndPoint para obtener producto pasando recibiendo el id
      operationId: getProduct
      parameters:
        - name: productId
          in: path
          description: id del producto
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: operacion exitos, respuesta de ProductDTO
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponseContainerDTO'

  #Path para las categorias
  /products/category:
    post:
      tags:
        - backoffice
      security:
        - bearerAuth: []
      summary: Crear Categoria
      description: EndPoint para crear categoria
      operationId: createCategory
      requestBody:
        description: Crear objeto categoria
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequestDTO'
      responses:
        '200':
          description: operacion exitosa, respuesta de CategoryDTO
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponseContainerDTO'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    #Obtener todas las categorias
    get:
      tags:
        - backoffice
      security:
        - bearerAuth: []
      summary: Obtener todas las categorias
      description: EndPoint para obtener todas las categorias
      operationId: getAllCategory
      responses:
        default:
          description: operacion exitosa, respuesta de CategoryListDTO
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryListResponseContainerDTO'


    #Actualizacion, eliminacion, y busqueda de cateogoria por id
  /products/category/{categoryId}:
    put:
      tags:
        - backoffice
      security:
        - bearerAuth: []
      summary: Actualizar Categoria
      description: EndPoint para actualizar ccategoria
      operationId: updateCategory
      parameters:
        - name: categoryId
          in: path
          description: id de categoria
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: actualizar onjeto categoria
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryDTO'
      responses:
        '200':
          description: operacion exitosa, respuesta de CategoryDTO
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponseContainerDTO'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    #Eliminar Categoria por id
    delete:
      tags:
        - backoffice
      security:
        - bearerAuth: []
      summary: Eliminar Categoria
      description: EndPoint para eliminar categoria
      operationId: deleteCategory
      parameters:
        - name: categoryId
          in: path
          description: id de categoria
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: operaion exitosa, respuesta de EmptyResponseDTO
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponseDTO'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    #Busqueda de cateogira por id
    get:
      tags:
        - backoffice
      security:
        - bearerAuth: []
      summary: Get categoria
      description: EndPoint para buscar categoria por id
      operationId: getCategory
      parameters:
        - name: categoryId
          in: path
          description: id de categoria
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation response a CategoryDTO as data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponseContainerDTO'




  /token/refresh:
    patch:
      tags:
        - login
      security:
        - bearerAuth: []
      summary: refresh a token
      description: Refresh a token, authentication required.
      operationId: refreshToken
      parameters:
        - name: Authorization
          in: header
          description: authentication token
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation response a JWTResponseDTO as data
          headers:
            Access-Token:
              schema:
                type: string
            Refresh-Token:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTResponseDTO'

  /token/login:
    post:
      tags:
        - login
      summary: Create a user session
      description: Create a user session
      operationId: login
      parameters:
        - name: username
          in: query
          description: the username to authenticate
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: the password to authenticate
          required: true
          schema:
            type: string
            format: password
      responses:
        200:
          description: successful operation response a JWTResponseDTO as data
          headers:
            Access-Token:
              schema:
                type: string
            Refresh-Token:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTResponseDTO'


#Componentes para definir los schemas y referenciarlos.
components:
  schemas:
    #schema UserDTO para el modelado de Usuario. Leagregamos el DTO para identificar que este es el modelo de transferencia con el que vamos a trabajar. Ejemplos UserEntity: Modelo de db. UserDTO: Modelo de transferencia
    UserDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: 'MyS3cr3tP@ssword'
        role:
          type: string
          description: The user role.
          example: ROLE_USER
          default: ROLE_USER
          enum:
            - ROLE_USER
            - ROLE_ADMIN
        dateCreated:
          type: string
          #Format se usa para validar que lo que recibe sea del mismo tipo.
          format: date
          example: '2023-03-10'
        dateDeleted:
          type: string
          format: date
          example: '2023-03-10'
      #Required a la altura de propiedades nos brinda la posibilidad de pasarle el atributos que queremos que sean requeridos, en este caso el unico que no es requerido es el dateDeleted.
      required:
        -  username
        - firstName
        - lastName
        - email
        - password
        - role
        - dateCreated

    #Creamos el modelo UserRequestDTO ya que lo vamos a usar para el POST de user, por que tanto el id como las fechas no son necesarias para la creacion del mismo
    UserRequestDTO:
      type: object
      properties:
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: 'MyS3cr3tP@ssword'
        role:
          type: string
          description: The user role.
          example: ROLE_USER
          default: ROLE_USER
          enum:
            - ROLE_USER
            - ROLE_ADMIN
      required:
        -  username
        - firstName
        - lastName
        - email
        - role
        - password

    #Creamos un modelo para hacer una lista de usuario y poder responder a los GET ya que estos devuelven LISTAS si es que no espeficicamos y mandamos un ID para recibir uno en particular.
    UserListDTO:
      #Lista tipo Array
      type: object
      properties:
        #En los items hacemos referencia al modelo UserDTO, osea es una lista de UserDTO
        items:
          type: array
          items:
            $ref: '#/components/schemas/UserDTO'

    UserRoleDTO:
      type: object
      properties:
        name:
          type: string
          example: ROLE_USER
      required:
        - name

    UserRoleRequestDTO:
      type: object
      properties:
        name:
          type: string
          example: ROLE_USER
      required:
        - name
    UserRoleListDTO:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/UserRoleDTO'

    ProductDTO:
      type: object
      title: ProductDTO
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "Product Name"
        description:
          type: string
          example: "This is a product description."
        category:
          $ref: "#/components/schemas/CategoryDTO"
        price:
          type: number
          format: double
          example: 7000
        qty:
          type: integer
          example: 100
        dateCreated:
          type: string
          format: date
          example: '2023-03-10'
        dateDeleted:
          type: string
          format: date
          example: '2023-03-12'

    ProductRequestDTO:
      type: object
      properties:
        name:
          type: string
          example: Reloj Smart Samsung
        description:
          type: string
          example: Reloj Smartwatch samsung Galaxy watch 4
        price:
          type: number
          format: double
          example: 7000
        qty:
          type: integer
          example: 2
          description: the stock quantity.
        category:
          $ref: '#/components/schemas/CategoryRequestDTO'
      required:
        - name
        - price
        - qty
        - category

    ProductListDTO:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ProductDTO'

    CategoryDTO:
      type: object
      title: categoryDTO
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "Category Name"
        products:
          type: array
          items:
            $ref: '#/components/schemas/ProductDTO'
        dateCreated:
          type: string
          format: date
          example: '2023-03-10'
        dateDeleted:
          type: string
          format: date
          example: '2023-03-12'

    CategoryRequestDTO:
      type: object
      properties:
        name:
          type: string
          example: James
      required:
        - name

    CategoryListDTO:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CategoryDTO'

    CartDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        user:
          $ref: '#/components/schemas/UserDTO'
        product_list:
          type: array
          items:
            $ref: '#/components/schemas/ProductDTO'
        dateCreated:
          type: string
          format: date
          example: '2023-02-01'
        dateDeleted:
          type: string
          format: date
          example: '2023-02-01'
      required:
        - user
        - dateCreated
    ProductCartDTO:
      type: object
      properties:
        cart:
          $ref: '#/components/schemas/CartDTO'
        product:
          $ref: '#/components/schemas/ProductDTO'
        qty:
          type: integer
          example: 2
          description: the stock quantity.
      required:
        - cart_id
        - dateCreated
    ProductCartListDTO:
      type: object
      properties:
        cart:
          $ref: '#/components/schemas/CartDTO'
        products:
          type: array
          items:
            $ref: '#/components/schemas/ProductCartDTO'
    OrderDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        user:
          $ref: '#/components/schemas/UserDTO'
        product_list:
          type: array
          items:
            $ref: '#/components/schemas/ProductDTO'
        dateCreated:
          type: string
          format: date
          example: '2023-02-01'
        dateDeleted:
          type: string
          format: date
          example: '2023-02-01'
      required:
        - user
        - dateCreated


    JWTResponseDTO:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string

    EmptyResponseDTO:
      type: object
      properties:
        date:
          type: string
          format: date-time
          example: '2023-02-01'



    UserListResponseContainerDTO:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: "#/components/schemas/UserDTO"

    UserResponseContainerDTO:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/UserDTO"

    UserRoleListResponseContainerDTO:
      type: object
      properties:
        roles:
          type: array
          items:
            $ref: "#/components/schemas/UserRoleDTO"

    UserRoleResponseContainerDTO:
      type: object
      properties:
        role:
          $ref: "#/components/schemas/UserRoleDTO"

    ProductListResponseContainerDTO:
      type: object
      properties:
        products:
          type: array
          items:
            $ref: "#/components/schemas/ProductDTO"

    ProductResponseContainerDTO:
      type: object
      properties:
        product:
            $ref: "#/components/schemas/ProductDTO"

    CategoryListResponseContainerDTO:
      type: object
      properties:
        categories:
          type: array
          items:
            $ref: "#/components/schemas/CategoryDTO"

    CategoryResponseContainerDTO:
      type: object
      properties:
        category:
          $ref: "#/components/schemas/CategoryDTO"



  responses:
    UnauthorizedError:
      description: Access token is missing or invalid

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []

